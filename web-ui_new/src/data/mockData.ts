// Mock data for UI-only mode

export const mockCampaigns = [
  {
    id: '1',
    name: 'Summer Sales Campaign',
    description: 'Outbound calling campaign for summer promotions',
    campaignType: 'OUTBOUND' as const,
    isActive: true,
    totalCalls: 450,
    successfulCalls: 280,
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-02-10'),
    status: 'ACTIVE',
  },
  {
    id: '2',
    name: 'Customer Support Inbound',
    description: 'Inbound support campaign for customer inquiries',
    campaignType: 'INBOUND' as const,
    isActive: true,
    totalCalls: 1200,
    successfulCalls: 980,
    createdAt: new Date('2024-02-01'),
    updatedAt: new Date('2024-02-12'),
    status: 'ACTIVE',
  },
  {
    id: '3',
    name: 'Product Launch Outreach',
    description: 'Announce new product features to existing customers',
    campaignType: 'OUTBOUND' as const,
    isActive: false,
    totalCalls: 320,
    successfulCalls: 195,
    createdAt: new Date('2024-01-20'),
    updatedAt: new Date('2024-02-05'),
    status: 'PAUSED',
  },
];

export const mockAgents = [
  {
    id: 'agent-1',
    name: 'Sales AI Agent',
    description: 'Specialized in sales and product information',
    status: 'ACTIVE' as const,
    model: 'gpt-4',
    voice: 'alloy',
    totalConversations: 156,
    createdAt: new Date('2024-01-10'),
    updatedAt: new Date('2024-02-12'),
    temperature: 0.7,
    maxTokens: 150,
  },
  {
    id: 'agent-2',
    name: 'Support AI Agent',
    description: 'Customer support specialist',
    status: 'ACTIVE' as const,
    model: 'gpt-4',
    voice: 'nova',
    totalConversations: 423,
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-02-12'),
    temperature: 0.6,
    maxTokens: 200,
  },
  {
    id: 'agent-3',
    name: 'Appointment Setter',
    description: 'Books appointments and schedules calls',
    status: 'INACTIVE' as const,
    model: 'gpt-3.5-turbo',
    voice: 'echo',
    totalConversations: 89,
    createdAt: new Date('2024-01-20'),
    updatedAt: new Date('2024-02-08'),
    temperature: 0.5,
    maxTokens: 100,
  },
];

export const mockPhoneNumbers = [
  {
    id: 'num-1',
    number: '+1 (555) 123-4567',
    friendlyName: 'Main Sales Line',
    status: 'ACTIVE',
    country: 'US',
    region: 'California',
    monthlyCost: 1.5,
    callDirection: 'BOTH',
    isActive: true,
    campaignId: '1',
    createdAt: new Date('2024-01-10'),
    updatedAt: new Date('2024-02-12'),
  },
  {
    id: 'num-2',
    number: '+1 (555) 234-5678',
    friendlyName: 'Support Hotline',
    status: 'ACTIVE',
    country: 'US',
    region: 'New York',
    monthlyCost: 1.5,
    callDirection: 'INBOUND',
    isActive: true,
    campaignId: '2',
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-02-12'),
  },
  {
    id: 'num-3',
    number: '+1 (555) 345-6789',
    friendlyName: 'Outbound Line',
    status: 'AVAILABLE',
    country: 'US',
    region: 'Texas',
    monthlyCost: 1.5,
    callDirection: 'OUTBOUND',
    isActive: true,
    campaignId: null,
    createdAt: new Date('2024-01-20'),
    updatedAt: new Date('2024-02-12'),
  },
];

export const mockLeadLists = [
  {
    id: 'list-1',
    name: 'Q1 Prospects',
    description: 'Leads for Q1 sales campaign',
    createdAt: new Date('2024-01-05'),
    updatedAt: new Date('2024-02-12'),
    _count: { leads: 450 },
  },
  {
    id: 'list-2',
    name: 'Existing Customers',
    description: 'Current customer base for upsell opportunities',
    createdAt: new Date('2024-01-10'),
    updatedAt: new Date('2024-02-12'),
    _count: { leads: 1200 },
  },
];

export const mockStats = {
  campaigns: {
    totalCampaigns: mockCampaigns.length,
    activeCampaigns: mockCampaigns.filter(c => c.isActive).length,
    inboundCampaigns: mockCampaigns.filter(c => c.campaignType === 'INBOUND').length,
    outboundCampaigns: mockCampaigns.filter(c => c.campaignType === 'OUTBOUND').length,
    pausedCampaigns: mockCampaigns.filter(c => !c.isActive).length,
  },
  agents: {
    totalAgents: mockAgents.length,
    activeAgents: mockAgents.filter(a => a.status === 'ACTIVE').length,
    inactiveAgents: mockAgents.filter(a => a.status === 'INACTIVE').length,
    trainingAgents: 0,
  },
  numbers: {
    totalNumbers: mockPhoneNumbers.length,
    availableNumbers: mockPhoneNumbers.filter(p => p.isActive && !p.campaignId).length,
    assignedNumbers: mockPhoneNumbers.filter(p => p.campaignId).length,
    inactiveNumbers: mockPhoneNumbers.filter(p => !p.isActive).length,
  },
};

// Mock service to replace gobiService
export const mockGobiService = {
  campaigns: {
    getAll: async () => ({ data: mockCampaigns, total: mockCampaigns.length }),
    getById: async (id: string) => ({ data: mockCampaigns.find(c => c.id === id) }),
    create: async (data: any) => ({ data: { ...data, id: `campaign-${Date.now()}` }, message: 'Campaign created' }),
    update: async (id: string, data: any) => ({ data: { ...mockCampaigns.find(c => c.id === id), ...data }, message: 'Campaign updated' }),
    delete: async (id: string) => ({ message: 'Campaign deleted' }),
    getStats: async () => mockStats.campaigns,
    getOverallStats: async () => mockStats.campaigns,
  },
  agents: {
    getAll: async () => ({ agents: mockAgents, pagination: { page: 1, total: mockAgents.length } }),
    getById: async (id: string) => mockAgents.find(a => a.id === id),
    create: async (data: any) => ({ agent: { ...data, id: `agent-${Date.now()}` }, message: 'Agent created' }),
    update: async (id: string, data: any) => ({ agent: { ...mockAgents.find(a => a.id === id), ...data }, message: 'Agent updated' }),
    delete: async (id: string) => ({ message: 'Agent deleted' }),
    getStats: async () => mockStats.agents,
  },
  numbers: {
    getAll: async () => ({ data: mockPhoneNumbers }),
    getById: async (id: string) => ({ data: mockPhoneNumbers.find(n => n.id === id) }),
    create: async (data: any) => ({ data: { ...data, id: `num-${Date.now()}` }, message: 'Number purchased' }),
    update: async (id: string, data: any) => ({ data: { ...mockPhoneNumbers.find(n => n.id === id), ...data }, message: 'Number updated' }),
    delete: async (id: string) => ({ message: 'Number deleted' }),
    getStats: async () => mockStats.numbers,
  },
  leadLists: {
    getAll: async () => mockLeadLists,
    getDetails: async (id: string) => ({ data: mockLeadLists.find(l => l.id === id) }),
    create: async (data: any) => ({ data: { ...data, id: `list-${Date.now()}` }, message: 'Lead list created' }),
    update: async (id: string, data: any) => ({ leadList: { ...mockLeadLists.find(l => l.id === id), ...data }, message: 'Lead list updated' }),
    delete: async (id: string) => ({ message: 'Lead list deleted' }),
  },
};
